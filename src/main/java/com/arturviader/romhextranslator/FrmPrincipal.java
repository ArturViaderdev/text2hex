/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.arturviader.romhextranslator;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author msi
 */
public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
        tbyte.setColumns(4);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barchivo = new javax.swing.JButton();
        tarchivo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ttexto = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tresultado = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        bconvertir = new javax.swing.JButton();
        tcontador = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        bborrar = new javax.swing.JButton();
        bportapapeles = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        tbyte = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TEXT2HEX");

        barchivo.setText("...");
        barchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barchivoActionPerformed(evt);
            }
        });

        jLabel1.setText("TABLE");

        ttexto.setColumns(20);
        ttexto.setRows(5);
        jScrollPane1.setViewportView(ttexto);

        jLabel2.setText("TEXT");

        tresultado.setEditable(false);
        tresultado.setColumns(20);
        tresultado.setRows(5);
        jScrollPane2.setViewportView(tresultado);

        jLabel3.setText("HEX");

        bconvertir.setText("TEXT2HEX");
        bconvertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bconvertirActionPerformed(evt);
            }
        });

        tcontador.setEditable(false);

        jLabel4.setText("HEX COUNTER");

        bborrar.setText("RESET");
        bborrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bborrarActionPerformed(evt);
            }
        });

        bportapapeles.setText("COPY HEX");
        bportapapeles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bportapapelesActionPerformed(evt);
            }
        });

        jLabel5.setText("ADD BYTE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tarchivo)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tbyte, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tcontador, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barchivo)
                    .addComponent(bconvertir)
                    .addComponent(bborrar)
                    .addComponent(bportapapeles))
                .addGap(11, 11, 11))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barchivo)
                    .addComponent(tarchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bconvertir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bportapapeles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bborrar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(tbyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tcontador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ordenalista(ArrayList<Palabra> A) {
        int i, j;
        Palabra aux;
        for (i = 0; i < A.size() - 1; i++) {
            for (j = 0; j < A.size() - i - 1; j++) {
                if (A.get(j + 1).gettexto().length() > A.get(j).gettexto().length()) {
                    aux = A.get(j + 1);
                    A.set(j + 1, A.get(j));
                    A.set(j, aux);
                }
            }
        }
    }

    private boolean compruebahex() {
        int cont = 0;
        int contb = 0;
        String cadena = tbyte.getText();
        String letras = "ABCDEF0123456789";
        boolean sal = false;
        boolean encontrado = false;
        boolean mal = false;
        boolean salgrande = false;
        while (!salgrande) {
            if (cont < cadena.length()) {

                contb = 0;
                sal = false;
                encontrado = false;
                while (!sal) {
                    if (contb < letras.length()) {
                        if (cadena.charAt(cont) == letras.charAt(contb)) {
                            encontrado = true;
                            sal = true;
                        } else {
                            contb++;
                        }
                    } else {
                        sal = true;
                    }
                }
                if (!encontrado) {
                    salgrande = true;
                    mal = true;
                } else {
                    cont++;
                }
            } else {
                salgrande = true;
            }
        }
        if (mal) {
            return false;
        } else {
            return true;
        }
    }

    private boolean compruebabyteok() {
        if (tbyte.getText().length() == 0) {
            return true;
        } else if (tbyte.getText().length() == 2) {
            if (compruebahex()) {
                return true;
            } else {
                return false;
            }
        } else if (tbyte.getText().length() == 4) {
            if (compruebahex()) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    private void ordenar_de_grande_a_pequeno(ArrayList<Palabra> palabras) {
        int i, j;
        Palabra aux;
        for (i = 0; i < palabras.size() - 1; i++) {
            for (j = 0; j < palabras.size() - i - 1; j++) {
                if (palabras.get(j + 1).gettexto().length() > palabras.get(j).gettexto().length()) {
                    aux = palabras.get(j + 1);

                    palabras.set(j + 1, palabras.get(j));
                    palabras.set(j, aux);
                }
            }
        }
    }

    private void imprimepalabras(ArrayList<Palabra> palabras) {
        int cont = 0;
        while (cont < palabras.size()) {
            System.out.println(palabras.get(cont).gettexto());
            cont++;
        }
    }

    private String quitasaltosdelinea(String texto) {
        texto = texto.replaceAll("\t", "");
        texto = texto.replaceAll("\n", "");
        texto = texto.replaceAll(" ", "");
        return texto;
    }

    private boolean meteenlista(String texto, ArrayList<Lista> todo) {
        int cont = 0;
        boolean sal = false;
        boolean encontrado = false;
        boolean enllave = false;
        String leido = "";

        while (!sal) {
            if (cont < texto.length()) {
                if (!enllave) {
                    if (texto.charAt(cont) == '{') {
                        if(cont>0)
                        {
                            todo.add(new Lista(leido,true));
                        }
                        enllave = true;
                        leido = "";
                        cont++;
                    } else if (texto.charAt(cont) == '}') {
                        encontrado = true;
                        sal = true;
                    }
                    else
                    {
                        
                        leido = leido + texto.charAt(cont);
                        cont++;
                        if(cont==texto.length())
                        {
                            todo.add(new Lista(leido,true));
                        }
                    }
                } else {
                    if (texto.charAt(cont) == '{') {
                        encontrado = true;
                        sal = true;
                        cont++;
                    } else if (texto.charAt(cont) == '}') {
                        if(cont>0)
                        {
                            todo.add(new Lista(leido,false));
                        }
                        enllave=false;
                        leido = "";
                        cont++;
                    }
                    else
                    {
                        leido = leido + texto.charAt(cont);
                        cont++;
                        if(cont==texto.length())
                        {
                            sal =true;
                            encontrado = true;
                        }
                    }
                }
            } else {
                sal = true;     
            }
        }
        if(encontrado)
        {
            return false;
        }
        else
        {
            return true;
        }

    }

    private void bconvertirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bconvertirActionPerformed
        // TODO add your handling code here:
        ArrayList<Palabra> palabras = new ArrayList<>();
        BufferedReader br = null;
        String titulo = "";
        String hex = "";
        String palabra = "";

        if (tarchivo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(
                    this, "Has dejado el campo en blanco");
        } else {
            try {
                if (compruebabyteok()) {

                    //br = new BufferedReader(new FileReader(tarchivo.getText()));
                    FileInputStream fis = new FileInputStream(tarchivo.getText());
                    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.ISO_8859_1);
                    br = new BufferedReader(isr);
                    String st;
                    while ((st = br.readLine()) != null) {
                        int cont = 0;
                        boolean sal = false;
                        boolean derecha = false;
                        hex = "";
                        palabra = "";
                        while (!sal) {
                            if (cont < st.length()) {
                                if (!derecha) {
                                    if (st.charAt(cont) == '=') {
                                        derecha = true;
                                    } else {
                                        hex = hex + st.charAt(cont);
                                    }
                                } else {
                                    palabra = palabra + st.charAt(cont);
                                }
                                cont++;
                            } else {
                                sal = true;
                            }
                        }

                        palabras.add(new Palabra(hex, palabra));
                        //System.out.println(palabra);
                    }

                    ordenar_de_grande_a_pequeno(palabras);
                    //imprimepalabras(palabras);

                    String texto = ttexto.getText();
                    texto = quitasaltosdelinea(texto);
                    ArrayList<Lista> todo = new ArrayList<>();
                    if (meteenlista(texto,todo)) {
                        int contatodo = 0;
                        String resultado = "";
                        while (contatodo < todo.size()) {
                            if (todo.get(contatodo).getTraducir()) {
                                texto = todo.get(contatodo).getTexto();
                                int cont = 0;
                                String buscar = "";

                                int inicio;
                                int fin;

                                int contbusca;
                                boolean salbusca;
                                boolean encontradobusca;

                                inicio = 0;
                                fin = texto.length();

                                while (inicio < texto.length() && fin > 0 && fin>inicio) {

                                    salbusca = false;
                                    encontradobusca = false;
                                    contbusca = 0;

                                    buscar = texto.substring(inicio, fin);

                                    salbusca = false;
                                    while (!salbusca) {
                                        if (contbusca < palabras.size()) {
                                            if (palabras.get(contbusca).gettexto().equals(buscar)) {
                                                encontradobusca = true;
                                                salbusca = true;
                                            } else {
                                                contbusca++;
                                            }
                                        } else {
                                            salbusca = true;
                                        }
                                    }
                                    if (encontradobusca) {
                                        encontradobusca = false;
                                        inicio = fin;
                                        fin = texto.length();
                                        if (tbyte.getText().length() > 0) {
                                            resultado = resultado + tbyte.getText();
                                        }
                                        resultado = resultado + palabras.get(contbusca).gethex();
                                        buscar = "";
                                    } else {
                                        fin--;
                                    }
                                }
                                
                                if (fin==inicio && fin!=texto.length()) {

                                    tresultado.setText("");
                                    JOptionPane.showMessageDialog(
                                            this, "Faltan ocurrencias.");
                                    contatodo = todo.size();

                                }
                            } else {
                                resultado = resultado + todo.get(contatodo).getTexto();
                            }
                            contatodo++;
                        }
                        tresultado.setText(resultado);
                        tcontador.setText(Integer.toString(resultado.length() / 2));

                    } else {
                        JOptionPane.showMessageDialog(
                                this, "Llaves mal");
                    }

                } else {
                    JOptionPane.showMessageDialog(
                            this, "Código hexadecimal incorrecto.");
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                        this, "Error leyendo el archivo");
            }
        }


    }//GEN-LAST:event_bconvertirActionPerformed

    private String leearchivo() {
        String salida = "";
        BufferedReader br
                = null;
        try {
            br = new BufferedReader(new FileReader("ruta.txt"));
            // Declaring a string variable
            String st;
            // Condition holds true till
            // there is character in a string
            if ((st = br.readLine()) != null) // Print the string
            {
                salida = st;
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //System.out.println(salida);
        return salida;
    }

    private void barchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barchivoActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        File lectura = new File("ruta.txt");
        String ruta ="";
        if (lectura.exists())
        {
              ruta = leearchivo();      
        }
        else
        {
            ruta = System.getProperty("user.home");
        }
        
        fileChooser.setCurrentDirectory(new File(ruta));

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            BufferedWriter writer = null;
            try {
                // user selects a file
                File selectedFile = fileChooser.getSelectedFile();
                tarchivo.setText(selectedFile.getAbsolutePath());
                writer = new BufferedWriter(new FileWriter("ruta.txt"));
                writer.write(selectedFile.getParent());
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    writer.close();
                } catch (IOException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_barchivoActionPerformed

    private void bborrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bborrarActionPerformed
        // TODO add your handling code here:
        ttexto.setText("");
        tresultado.setText("");
        tcontador.setText("0");
    }//GEN-LAST:event_bborrarActionPerformed

    private void bportapapelesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bportapapelesActionPerformed
        // TODO add your handling code here:
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(new StringSelection(tresultado.getText()), null);
    }//GEN-LAST:event_bportapapelesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton barchivo;
    private javax.swing.JButton bborrar;
    private javax.swing.JButton bconvertir;
    private javax.swing.JButton bportapapeles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField tarchivo;
    private javax.swing.JTextField tbyte;
    private javax.swing.JTextField tcontador;
    private javax.swing.JTextArea tresultado;
    private javax.swing.JTextArea ttexto;
    // End of variables declaration//GEN-END:variables
}
